// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/huytran2000-hcmus/bTaskee/booking/booking_client/dto"
)

// PostAPIV1TasksReader is a Reader for the PostAPIV1Tasks structure.
type PostAPIV1TasksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAPIV1TasksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostAPIV1TasksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostAPIV1TasksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/v1/tasks] PostAPIV1Tasks", response, response.Code())
	}
}

// NewPostAPIV1TasksOK creates a PostAPIV1TasksOK with default headers values
func NewPostAPIV1TasksOK() *PostAPIV1TasksOK {
	return &PostAPIV1TasksOK{}
}

/*
PostAPIV1TasksOK describes a response with status code 200, with default header values.

success
*/
type PostAPIV1TasksOK struct {
	Payload *PostAPIV1TasksOKBody
}

// IsSuccess returns true when this post Api v1 tasks o k response has a 2xx status code
func (o *PostAPIV1TasksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post Api v1 tasks o k response has a 3xx status code
func (o *PostAPIV1TasksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post Api v1 tasks o k response has a 4xx status code
func (o *PostAPIV1TasksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post Api v1 tasks o k response has a 5xx status code
func (o *PostAPIV1TasksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post Api v1 tasks o k response a status code equal to that given
func (o *PostAPIV1TasksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post Api v1 tasks o k response
func (o *PostAPIV1TasksOK) Code() int {
	return 200
}

func (o *PostAPIV1TasksOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/tasks][%d] postApiV1TasksOK  %+v", 200, o.Payload)
}

func (o *PostAPIV1TasksOK) String() string {
	return fmt.Sprintf("[POST /api/v1/tasks][%d] postApiV1TasksOK  %+v", 200, o.Payload)
}

func (o *PostAPIV1TasksOK) GetPayload() *PostAPIV1TasksOKBody {
	return o.Payload
}

func (o *PostAPIV1TasksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostAPIV1TasksOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAPIV1TasksBadRequest creates a PostAPIV1TasksBadRequest with default headers values
func NewPostAPIV1TasksBadRequest() *PostAPIV1TasksBadRequest {
	return &PostAPIV1TasksBadRequest{}
}

/*
PostAPIV1TasksBadRequest describes a response with status code 400, with default header values.

bad request
*/
type PostAPIV1TasksBadRequest struct {
	Payload *PostAPIV1TasksBadRequestBody
}

// IsSuccess returns true when this post Api v1 tasks bad request response has a 2xx status code
func (o *PostAPIV1TasksBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post Api v1 tasks bad request response has a 3xx status code
func (o *PostAPIV1TasksBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post Api v1 tasks bad request response has a 4xx status code
func (o *PostAPIV1TasksBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post Api v1 tasks bad request response has a 5xx status code
func (o *PostAPIV1TasksBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post Api v1 tasks bad request response a status code equal to that given
func (o *PostAPIV1TasksBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post Api v1 tasks bad request response
func (o *PostAPIV1TasksBadRequest) Code() int {
	return 400
}

func (o *PostAPIV1TasksBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/tasks][%d] postApiV1TasksBadRequest  %+v", 400, o.Payload)
}

func (o *PostAPIV1TasksBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/tasks][%d] postApiV1TasksBadRequest  %+v", 400, o.Payload)
}

func (o *PostAPIV1TasksBadRequest) GetPayload() *PostAPIV1TasksBadRequestBody {
	return o.Payload
}

func (o *PostAPIV1TasksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostAPIV1TasksBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostAPIV1TasksBadRequestBody post API v1 tasks bad request body
swagger:model PostAPIV1TasksBadRequestBody
*/
type PostAPIV1TasksBadRequestBody struct {
	dto.RestfulErrorResponse

	// data
	Data string `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostAPIV1TasksBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostAPIV1TasksBadRequestBodyAO0
	var postAPIV1TasksBadRequestBodyAO0 dto.RestfulErrorResponse
	if err := swag.ReadJSON(raw, &postAPIV1TasksBadRequestBodyAO0); err != nil {
		return err
	}
	o.RestfulErrorResponse = postAPIV1TasksBadRequestBodyAO0

	// PostAPIV1TasksBadRequestBodyAO1
	var dataPostAPIV1TasksBadRequestBodyAO1 struct {
		Data string `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostAPIV1TasksBadRequestBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostAPIV1TasksBadRequestBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostAPIV1TasksBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postAPIV1TasksBadRequestBodyAO0, err := swag.WriteJSON(o.RestfulErrorResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postAPIV1TasksBadRequestBodyAO0)
	var dataPostAPIV1TasksBadRequestBodyAO1 struct {
		Data string `json:"data,omitempty"`
	}

	dataPostAPIV1TasksBadRequestBodyAO1.Data = o.Data

	jsonDataPostAPIV1TasksBadRequestBodyAO1, errPostAPIV1TasksBadRequestBodyAO1 := swag.WriteJSON(dataPostAPIV1TasksBadRequestBodyAO1)
	if errPostAPIV1TasksBadRequestBodyAO1 != nil {
		return nil, errPostAPIV1TasksBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataPostAPIV1TasksBadRequestBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post API v1 tasks bad request body
func (o *PostAPIV1TasksBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with dto.RestfulErrorResponse
	if err := o.RestfulErrorResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this post API v1 tasks bad request body based on the context it is used
func (o *PostAPIV1TasksBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with dto.RestfulErrorResponse
	if err := o.RestfulErrorResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostAPIV1TasksBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAPIV1TasksBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostAPIV1TasksBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostAPIV1TasksOKBody post API v1 tasks o k body
swagger:model PostAPIV1TasksOKBody
*/
type PostAPIV1TasksOKBody struct {
	dto.RestfulSuccessResponse

	// data
	Data string `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostAPIV1TasksOKBody) UnmarshalJSON(raw []byte) error {
	// PostAPIV1TasksOKBodyAO0
	var postAPIV1TasksOKBodyAO0 dto.RestfulSuccessResponse
	if err := swag.ReadJSON(raw, &postAPIV1TasksOKBodyAO0); err != nil {
		return err
	}
	o.RestfulSuccessResponse = postAPIV1TasksOKBodyAO0

	// PostAPIV1TasksOKBodyAO1
	var dataPostAPIV1TasksOKBodyAO1 struct {
		Data string `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostAPIV1TasksOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostAPIV1TasksOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostAPIV1TasksOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postAPIV1TasksOKBodyAO0, err := swag.WriteJSON(o.RestfulSuccessResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postAPIV1TasksOKBodyAO0)
	var dataPostAPIV1TasksOKBodyAO1 struct {
		Data string `json:"data,omitempty"`
	}

	dataPostAPIV1TasksOKBodyAO1.Data = o.Data

	jsonDataPostAPIV1TasksOKBodyAO1, errPostAPIV1TasksOKBodyAO1 := swag.WriteJSON(dataPostAPIV1TasksOKBodyAO1)
	if errPostAPIV1TasksOKBodyAO1 != nil {
		return nil, errPostAPIV1TasksOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostAPIV1TasksOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post API v1 tasks o k body
func (o *PostAPIV1TasksOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with dto.RestfulSuccessResponse
	if err := o.RestfulSuccessResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this post API v1 tasks o k body based on the context it is used
func (o *PostAPIV1TasksOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with dto.RestfulSuccessResponse
	if err := o.RestfulSuccessResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostAPIV1TasksOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAPIV1TasksOKBody) UnmarshalBinary(b []byte) error {
	var res PostAPIV1TasksOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
