// Code generated by go-swagger; DO NOT EDIT.

package dto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelWorkingDetails model working details
//
// swagger:model model.WorkingDetails
type ModelWorkingDetails struct {

	// from time
	// Example: 2024-04-07T09:00:00+07:00
	// Required: true
	FromTime *string `json:"from_time"`

	// house type
	// Example: two_room
	// Required: true
	HouseType *string `json:"house_type"`

	// service types
	// Example: ["cleaning"]
	// Required: true
	// Min Items: 1
	ServiceTypes []ModelServiceType `json:"service_types"`

	// to time
	// Example: 2024-04-07T11:00:00+07:00
	// Required: true
	ToTime *string `json:"to_time"`
}

// Validate validates this model working details
func (m *ModelWorkingDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFromTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHouseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelWorkingDetails) validateFromTime(formats strfmt.Registry) error {

	if err := validate.Required("from_time", "body", m.FromTime); err != nil {
		return err
	}

	return nil
}

func (m *ModelWorkingDetails) validateHouseType(formats strfmt.Registry) error {

	if err := validate.Required("house_type", "body", m.HouseType); err != nil {
		return err
	}

	return nil
}

func (m *ModelWorkingDetails) validateServiceTypes(formats strfmt.Registry) error {

	if err := validate.Required("service_types", "body", m.ServiceTypes); err != nil {
		return err
	}

	iServiceTypesSize := int64(len(m.ServiceTypes))

	if err := validate.MinItems("service_types", "body", iServiceTypesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.ServiceTypes); i++ {

		if err := m.ServiceTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service_types" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service_types" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ModelWorkingDetails) validateToTime(formats strfmt.Registry) error {

	if err := validate.Required("to_time", "body", m.ToTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this model working details based on the context it is used
func (m *ModelWorkingDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServiceTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelWorkingDetails) contextValidateServiceTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServiceTypes); i++ {

		if swag.IsZero(m.ServiceTypes[i]) { // not required
			return nil
		}

		if err := m.ServiceTypes[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service_types" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service_types" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelWorkingDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelWorkingDetails) UnmarshalBinary(b []byte) error {
	var res ModelWorkingDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
