// Code generated by go-swagger; DO NOT EDIT.

package dto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelServiceType model service type
//
// swagger:model model.ServiceType
type ModelServiceType string

func NewModelServiceType(value ModelServiceType) *ModelServiceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelServiceType.
func (m ModelServiceType) Pointer() *ModelServiceType {
	return &m
}

const (

	// ModelServiceTypeCleaning captures enum value "cleaning"
	ModelServiceTypeCleaning ModelServiceType = "cleaning"

	// ModelServiceTypeChildcare captures enum value "childcare"
	ModelServiceTypeChildcare ModelServiceType = "childcare"
)

// for schema
var modelServiceTypeEnum []interface{}

func init() {
	var res []ModelServiceType
	if err := json.Unmarshal([]byte(`["cleaning","childcare"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelServiceTypeEnum = append(modelServiceTypeEnum, v)
	}
}

func (m ModelServiceType) validateModelServiceTypeEnum(path, location string, value ModelServiceType) error {
	if err := validate.EnumCase(path, location, value, modelServiceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model service type
func (m ModelServiceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelServiceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model service type based on context it is used
func (m ModelServiceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
