// Code generated by go-swagger; DO NOT EDIT.

package dto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelHouseType model house type
//
// swagger:model model.HouseType
type ModelHouseType string

func NewModelHouseType(value ModelHouseType) *ModelHouseType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelHouseType.
func (m ModelHouseType) Pointer() *ModelHouseType {
	return &m
}

const (

	// ModelHouseTypeTwoRoom captures enum value "two_room"
	ModelHouseTypeTwoRoom ModelHouseType = "two_room"

	// ModelHouseTypeThreeRoom captures enum value "three_room"
	ModelHouseTypeThreeRoom ModelHouseType = "three_room"

	// ModelHouseTypeFourRoom captures enum value "four_room"
	ModelHouseTypeFourRoom ModelHouseType = "four_room"
)

// for schema
var modelHouseTypeEnum []interface{}

func init() {
	var res []ModelHouseType
	if err := json.Unmarshal([]byte(`["two_room","three_room","four_room"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelHouseTypeEnum = append(modelHouseTypeEnum, v)
	}
}

func (m ModelHouseType) validateModelHouseTypeEnum(path, location string, value ModelHouseType) error {
	if err := validate.EnumCase(path, location, value, modelHouseTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model house type
func (m ModelHouseType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelHouseTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model house type based on context it is used
func (m ModelHouseType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
