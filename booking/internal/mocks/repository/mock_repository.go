// Code generated by mockery v2.42.2. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/huytran2000-hcmus/bTaskee/booking/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// GetTaskByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetTaskByID(ctx context.Context, id uuid.UUID) (*model.Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskByID'
type MockRepository_GetTaskByID_Call struct {
	*mock.Call
}

// GetTaskByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) GetTaskByID(ctx interface{}, id interface{}) *MockRepository_GetTaskByID_Call {
	return &MockRepository_GetTaskByID_Call{Call: _e.mock.On("GetTaskByID", ctx, id)}
}

func (_c *MockRepository_GetTaskByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_GetTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_GetTaskByID_Call) Return(_a0 *model.Task, _a1 error) *MockRepository_GetTaskByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetTaskByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.Task, error)) *MockRepository_GetTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// InsertTask provides a mock function with given fields: ctx, task
func (_m *MockRepository) InsertTask(ctx context.Context, task *model.Task) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for InsertTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_InsertTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertTask'
type MockRepository_InsertTask_Call struct {
	*mock.Call
}

// InsertTask is a helper method to define mock.On call
//   - ctx context.Context
//   - task *model.Task
func (_e *MockRepository_Expecter) InsertTask(ctx interface{}, task interface{}) *MockRepository_InsertTask_Call {
	return &MockRepository_InsertTask_Call{Call: _e.mock.On("InsertTask", ctx, task)}
}

func (_c *MockRepository_InsertTask_Call) Run(run func(ctx context.Context, task *model.Task)) *MockRepository_InsertTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Task))
	})
	return _c
}

func (_c *MockRepository_InsertTask_Call) Return(_a0 error) *MockRepository_InsertTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_InsertTask_Call) RunAndReturn(run func(context.Context, *model.Task) error) *MockRepository_InsertTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
